<Qwiklabs Assessment: Log Analysis Using Regular Expressions>

<Exercise - 1>
You can view this file using:
cat syslog.log

2. To grep all the logs from ticky, use the following command:
grep ticky syslog.log

3. In order to search all the ERROR logs, use the following command:
grep "ERROR" syslog.log

4. To enlist all the ERROR messages of specific kind use the below syntax.
Syntax: grep ERROR [message] [file-name]
grep "ERROR Tried to add information to closed ticket" syslog.log

5. Open Python shell using the command below:
python3

6. Import the regular expression module (re).
import re
line = "May 27 11:45:40 ubuntu.local ticky: INFO: Created ticket [#1234] (username)"

7. To match a string stored in line variable, we use the search() method by defining a pattern.
re.search(r"ticky: INFO: ([\w ]*) ", line)

8. Output:
<_sre.SRE_Match object; span=(29, 57), match='ticky: INFO: Created ticket '>

9. You can also get the ERROR message as we did for the INFO log above from the ERROR log line.
line = "May 27 11:45:40 ubuntu.local ticky: ERROR: Error creating ticket [#1234] (username)"

10. To match a string stored in a line variable, we use the search() method by defining a pattern.
re.search(r"ticky: ERROR: ([\w ]*) ", line)

11. Output:
<_sre.SRE_Match object; span=(29, 65), match='ticky: ERROR: Error creating ticket '>

<Exercise - 2>
1. Now, use the Python interactive shell to create a dictionary.
fruit = {"oranges": 3, "apples": 5, "bananas": 7, "pears": 2}

2. Call the sorted function to sort the items in the dictionary.
sorted(fruit.items())

3. Output:
[('apples', 5), ('bananas', 7), ('oranges', 3), ('pears', 2)]

4. We'll now sort the dictionary using the item's key. For this use the operator module.
Pass the function itemgetter() as an argument to the sorted() function. Since the second element of tuple needs to be sorted, pass the argument 0 to the itemgetter function of the operator module.

import operator
sorted(fruit.items(), key=operator.itemgetter(0))

5. Output:
[('apples', 5), ('bananas', 7), ('oranges', 3), ('pears', 2)]

6. To sort a dictionary based on its values, pass the argument 1 to the itemgetter function of the operator module.
sorted(fruit.items(), key=operator.itemgetter(1))

7. Output:
[('pears', 2), ('oranges', 3), ('apples', 5), ('bananas', 7)]

8. Finally, you can also reverse the order of the sort using the reverse parameter. This parameter takes in a boolean argument.
To sort the fruit object from most to least occurrence, we pass the argument reverse=True.
sorted(fruit.items(), key = operator.itemgetter(1), reverse=True)

9. Output:
[('bananas', 7), ('apples', 5), ('oranges', 3), ('pears', 2)]

<Exercise - 3>
1. Create a new CSV file.

2. Add the following data into the file:
Full Name, Email Address
Blossom Gill, blossom@abc.edu
Hayes Delgado, nonummy@utnisia.com
Petra Jones, ac@abc.edu
Oleg Noel, noel@liberomauris.ca
Ahmed Miller, ahmed.miller@nequenonquam.co.uk
Macaulay Douglas, mdouglas@abc.edu
Aurora Grant, enim.non@abc.edu
Madison Mcintosh, mcintosh@nisiaenean.net
Montana Powell, montanap@semmagna.org
Rogan Robinson, rr.robinson@abc.edu
Simon Rivera, sri@abc.edu
Benedict Pacheco, bpacheco@abc.edu
Maisie Hendrix, mai.hendrix@abc.edu
Xaviera Gould, xlg@utnisia.net
Oren Rollins, oren@semmagna.com
Flavia Santiago, flavia@utnisia.net
Jackson Owens, jackowens@abc.edu
Britanni Humphrey, britanni@ut.net
Kirk Nixon, kirknixon@abc.edu
Bree Campbell, breee@utnisia.net

3. Save the file 
Ctrl-o, Enter key, and Ctrl-x.

4. Give executable permission to the script file csv_to_html.py.
sudo chmod +x csv_to_html.py

5.The script csv_to_html.py takes in two arguments, the CSV file, and location that would host the HTML page generated. Give write permission to the directory that would host that HTML page:
sudo chmod  o+w /var/www/html

6. Next, run the script csv_to_html.py script by passing two arguments: user_emails.csv file and the path /var/www/html/. Also, append a name to the path with an HTML extension. This should be the name that you want the HTML file to be created with.
./csv_to_html.py user_emails.csv /var/www/html/new_file.html

7. Replace <html-filename> with the new name.
Navigate to the /var/www/html directory. Here, you'll find an HTML file created with the filename you passed to the above script.
ls /var/www/html

8. Now, to view this HTML page, open any web-browser and enter the following URL in the search bar.
http://34.67.252.67/file.html

<Generate reports>
1. To create these reports write a python script named ticky_check.py. Use nano editor for this.
nano ticky_check.py

2. Add the shebang line.
######
#!/usr/bin/env python3
import re
import csv
import operator
import sys

per_user = {}
errors = {}

logfile = 'syslog.log'
f = open(logfile, 'r')

errorfile = 'error_message.csv'
userfile = 'user_statistics.csv'

for log in f:
        result = re.search(r"ticky: ([\w+]*):? ([\w' ]*) [\[[0-9#]*\]?]? ?\((.*)\)$", log)
        if result.group(2) not in errors.keys():
                errors[result.group(2)] = 0
        errors[result.group(2)] += 1
        if result.group(3) not in per_user.keys():
                per_user[result.group(3)] = {}
                per_user[result.group(3)]["INFO"] = 0
                per_user[result.group(3)]["ERROR"] = 0

        if result.group(1) == "INFO":
                per_user[result.group(3)]["INFO"] += 1
        elif result.group(1) == "ERROR":
                per_user[result.group(3)]["ERROR"] += 1

errors = sorted(errors.items(), key = operator.itemgetter(1), reverse = True)
per_user = sorted(per_user.items())

f.close()
errors.insert(0, ('Error', 'Count'))

f = open(errorfile, 'w')
for error in errors:
        a,b = error
        f.write(str(a)+','+str(b)+'\n')
f.close()

f = open(userfile, 'w')
f.write("Username,INFO,ERROR\n")
for stats in per_user:
        a,b = stats
        f.write(str(a)+','+str(b["INFO"])+','+str(b["ERROR"])+'\n')

######
<Visualize reports>
1. First, give executable permission to the Python script ticky_check.py.
chmod +x ticky_check.py

2. Run the ticky_check.py by using the following command:
./ticky_check.py

3. To convert the error_message.csv into HTML file run the following command:
./csv_to_html.py error_message.csv /var/www/html/error_msg.html

4. Replace <html-filename> with the name of your choice.
To convert user_statistics.csv into HTML file, run the following command:
./csv_to_html.py user_statistics.csv /var/www/html/stat_file.html

5. Now, to view these HTML pages, open any web-browser and enter the following URL in the search bar.
http://34.67.252.67/stat_file.html
