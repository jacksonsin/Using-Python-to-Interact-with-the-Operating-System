<Prerequisites>
For this lab, you should have a sound knowledge of these Linux commands:

cat
grep
cut
cat:

The cat command allows us to create single or multiple files, view the contents of a file, concatenate files, and redirect output in terminal or other files.

Syntax:

cat [file]

grep:

The grep command, which stands for "global regular expression print", processes text line-by-line and prints any lines that match a specified pattern.

Syntax:

grep [pattern] [file-directory]

Here, [file-directory] is the path to the directory/folder where you want to perform a search operation. The grep command is also used to search text and match a string or pattern within a file.

Syntax:

grep [pattern] [file-location]

cut:

The cut command extracts a given number of characters or columns from a file. A delimiter is a character or set of characters that separate text strings.

Syntax:

cut [options] [file]

For delimiter separated fields, the - d option is used. The -f option specifies the field, a set of fields, or a range of fields to be extracted.

Syntax:

cut -d [delimiter] -f [field number]

Linux I/O Redirection
Redirection is defined as switching standard streams of data from either a user-specified source or user-specified destination. Here are the following streams used in I/O redirection:

Redirection into a file using >

Append using >>

Redirection into a file
Each stream uses redirection commands. A single greater than sign (>) or a double greater than sign (>>) can be used to redirect standard output. If the target file doesn't exist, a new file with the same name will be created.

Commands with a single greater than sign (>) overwrite existing file content.

cat > [file]

Commands with a double greater than sign (>>) do not overwrite the existing file content, but it will append to it.

cat >> [file]

So, rather than creating a file, the >> command is used to append a word or string to the existing file.

<Exercise>
1. Navigate to data directory
cd data

2. To view the contents of the file
cat list.txt

3. view the complete /data directory using the ls command
ls

4. Let's try out the commands we learned in the previous section to catch all the "jane" lines.
grep 'jane' ../data/list.txt

5. Now, we'll list only the files containing the string "jane" and not include "janez".
grep ' jane ' ../data/list.txt

6. Let's fetch the different fields (columns) using -f flag :
grep " jane " ../data/list.txt | cut -d ' ' -f 1

7. Output:
grep " jane " ../data/list.txt | cut -d ' ' -f 2

8. Output:
grep " jane " ../data/list.txt | cut -d ' ' -f 3

9. You can also return a range of fields together by using:
grep " jane " ../data/list.txt | cut -d ' ' -f 1-3

10. To return a set of fields together:
grep " jane " ../data/list.txt | cut -d ' ' -f 1,3

<Test command>
1. The syntax for this command is:
test EXPRESSION

2. We'll check the existence of a file named jane_profile_07272018.doc using the following command:
if test -e ~/data/jane_profile_07272018.doc; then echo "File exists"; else echo "File doesn't exist"; fi

<Create a file using a Redirection operator>
1. We'll now use the redirection operator (>) to create an empty file simply by specifying the file name. The syntax for this is:
> [file-name]

2. Let's create a file named test.txt using the redirection operator.
> test.txt

3. To append any string to the test.txt file, you can use another redirection operator (>>).
echo "I am appending text to this test file" >> test.txt

4. You can view the contents of the file
cat test.txt

<Iteration>
1. Let's now iterate over a set of items and print those items.
for i in 1 2 3; do echo $i; done

<Find files using bash script>
1. Navigate to /scripts directory and create a new file named findJane.sh.
cd ~/scripts
nano findJane.sh

2. Now, add the shebang line.
#!/bin/bash

3. Create the text file oldFiles.txt and make sure it's empty. This oldFiles.txt file should save files with username "jane".
> oldFiles.txt

######
#!/bin/bash
> oldFiles.txt
files=$(grep " jane " ../data/list.txt | cut -d ' ' -f 3)
for i in $files; do
if test -e $HOME$i; then echo $HOME$i >> oldFiles.txt; fi
done
######

4. Make the file executable using the following command:
chmod +x findJane.sh

5. Run the bash script findJane.sh.
./findJane.sh

6. Use the cat command followed by the file name to view the contents of the newly generated file.
cat oldFiles.txt

<Rename files using Python script>
1. Create a Python script changeJane.py under /scripts directory using nano editor.
nano changeJane.py

######
#!/usr/bin/env python3
import sys
import subprocess
f = open (sys.argv[1],"r")

for line in f.readlines():
 old_name = line.strip()
 new_name = old_name.replace("jane","jdoe")
 subprocess.run(["mv",old_name,new_name])
f.close()
######

2. Make the file executable using the following command:
chmod +x changeJane.py

3. Run the script and pass the file oldFiles.txt as a command line argument.
./changeJane.py oldFiles.txt

4. Navigate to the /data directory and use the ls command to view renamed files.
cd ~/data
ls
