<Working with Regular Expressions>

Prerequisites
1. Navigate to the data directory 
cd data

2. To find the data, list the files
ls

3. View the contents of the user_emails.csv file
cat user_emails.csv

4. Navigate to the scripts directory
cd ~/scripts

5. Now list the contents within the scripts directory
ls

6. Update the file's permissions.
sudo chmod 777 script.py

7. Use nano editor to edit script.py file.
nano script.py

8. Import csv module to use in the script
import csv

9. Import the regex Python module 
import re

<Identify the old domain>
###### 
#!/usr/bin/env python3

#Import libraries
import csv
import re

def contains_domain(address, domain):
  """Returns True if the email address contains the given domain,
    in the domain position, false if not."""
  domain_pattern = r'[\w\.-]+@'+domain+'$'
  if re.match(domain_pattern, address):
    return True
  return False

def replace_domain(address, old_domain, new_domain):
  """Replaces the old domain with the new domain in
    the received address."""
  return address

######
<Replace the domain name>
######
#!/usr/bin/env python3

#Import libraries
import csv
import re

def contains_domain(address, domain):
  """Returns True if the email address contains the given domain,
    in the domain position, false if not."""
  domain_pattern = r'[\w\.-]+@'+domain+'$'
  if re.match(domain_pattern, address):
    return True
  return False

def replace_domain(address, old_domain, new_domain):
  """Replaces the old domain with the new domain in
    the received address."""
  old_domain_pattern = r'' + old_domain + '$'
  address = re.sub(old_domain_pattern, new_domain, address)

  return address

def main():
  """Processes the list of emails, replacing any instances of the
    old domain with the new domain."""

main()

######
<Write a CSV file with replaced domain from main>
######
#!/usr/bin/env python3

#Import libraries
import csv
import re

def contains_domain(address, domain):
  """Returns True if the email address contains the given domain,
    in the domain position, false if not."""
  domain_pattern = r'[\w\.-]+@'+domain+'$'
  if re.match(domain_pattern, address):
    return True
  return False

def replace_domain(address, old_domain, new_domain):
  """Replaces the old domain with the new domain in
    the received address."""
  old_domain_pattern = r'' + old_domain + '$'
  address = re.sub(old_domain_pattern, new_domain, address)

  return address

def main():
  """Processes the list of emails, replacing any instances of the
    old domain with the new domain."""
  old_domain, new_domain = 'abc.edu', 'xyz.edu'
  csv_file_location = '/home/student-00-1d57c3d67cfc/data/user_emails.csv'
  report_file =  '/home/student-00-1d57c3d67cfc/data' + '/updated_user_emails.csv'
  user_email_list = []
  old_domain_email_list = []
  new_domain_email_list = []

  with open(csv_file_location, 'r') as f:
    user_data_list = list(csv.reader(f))
    user_email_list = [data[1].strip() for data in user_data_list[1:]]

    for email_address in user_email_list:
      if contains_domain(email_address, old_domain):
        old_domain_email_list.append(email_address)
        replaced_email = replace_domain(email_address, old_domain, new_domain)
        new_domain_email_list.append(replaced_email)

    email_key = ' ' + 'Email Address'
    email_index = user_data_list[0].index(email_key)

    for user in user_data_list[1:]:
      for old_domain, new_domain in zip(old_domain_email_list, new_domain_email_list):
        if user[email_index] == ' ' + old_domain:
          user[email_index] = ' ' + new_domain
    f.close()

  with open(report_file, 'w+') as output_file:
    writer = csv.writer(output_file)
    writer.writerows(user_data_list)
    output_file.close()

main()

######
1. Save the file 
Ctrl-o, Enter key, and Ctrl-x.

2. Now run the file.
./script.py

3. View the newly generated file
ls ~/data

4. View the contents of this file
cat ~/data/updated_user_emails.csv
